import telebot
from telebot import types
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import OperationalError
import os

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
PHOTO_DIR = "photos"
os.makedirs(PHOTO_DIR, exist_ok=True)

# –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –±–æ—Ç–∞
API_TOKEN = "7734785531:AAHZ_RkWkmAUJMeE9Dq462K3k29ORh3wu0g"
bot = telebot.TeleBot(API_TOKEN)

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö SQLite
engine = create_engine('sqlite:///users.db', echo=True)
Base = declarative_base()

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String, unique=True)
    chat_id = Column(Integer)
    name = Column(String)
    age = Column(Integer)
    city = Column(String)
    interests = Column(String)
    bio = Column(String)
    likes = Column(Integer, default=0)
    dislikes = Column(Integer, default=0)
    photo_path = Column(String)
    likes_from_users = Column(String, default="")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ
try:
    Base.metadata.create_all(engine)
except OperationalError:
    print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")

Session = sessionmaker(bind=engine)

# –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_states = {}

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üìã –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")  
    markup.add(item1)
    return markup

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é 
def registered_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item2 = types.KeyboardButton("üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏")
    item3 = types.KeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ")
    item4 = types.KeyboardButton("üëÄ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–ª–∏")
    markup.add(item2, item3, item4)
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    session = Session()
    user = session.query(User).filter_by(username=message.from_user.username).first()

    if user:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –Ω–∞–∑–∞–¥! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=registered_menu())
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤. –©–æ–± –ø–æ—á–∞—Ç–∏, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å.", reply_markup=main_menu())
    
    session.close()

@bot.message_handler(commands=['clear'])
def clear_history(message):
    session = Session()
    user = session.query(User).filter_by(username=message.from_user.username).first()
    if user:
        session.delete(user)
        session.commit()
        bot.send_message(message.chat.id, "–í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±—É–ª–∞ –æ—á–∏—â–µ–Ω–∞. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –∑–∞–Ω–æ–≤–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /register.", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.", reply_markup=registered_menu())
    session.close()

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "üìã –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è":
        register_user(message)
    elif message.text == "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∫–µ—Ç–∏":
        view_next_profile(message)
    elif message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ":
        update_bio(message)
    elif "–õ–∞–π–∫" in message.text or "–î–∏–∑–ª–∞–π–∫" in message.text:
        handle_vote(message)
    elif message.text == "üëÄ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–ª–∏":
        view_likers(message)
    elif message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=registered_menu())
    else:
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é —á–µ—Ä–µ–∑ –º–µ–Ω—é.", reply_markup=registered_menu())

def view_likers(message):
    session = Session()
    user = session.query(User).filter_by(username=message.from_user.username).first()

    if user and user.likes_from_users:
        likers = user.likes_from_users.strip(",").split(",")  
        if likers:
            likers_list = "\n".join(likers)
            bot.send_message(message.chat.id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–∞–º –ª–∞–π–∫:\n{likers_list}")
        else:
            bot.send_message(message.chat.id, "–ù—ñ—Ö—Ç–æ —â–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–≤ –≤–∞–º –ª–∞–π–∫.")
    else:
        bot.send_message(message.chat.id, "–í–∏ —â–µ –Ω–µ –æ—Ç—Ä–∏–º–∞–ª–∏ –ª–∞–π–∫—ñ–≤.")

    session.close()

@bot.message_handler(commands=['register'])
def register_user(message):
    session = Session()
    user = session.query(User).filter_by(username=message.from_user.username).first()
    if user:
        bot.reply_to(message, "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
    else:
        msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:")
        bot.register_next_step_handler(msg, process_name_step, session)

def process_name_step(message, session):
    chat_id = message.chat.id
    name = message.text

    existing_user = session.query(User).filter_by(username=message.from_user.username).first()
    if existing_user:
        bot.reply_to(message, "–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.")
        session.close()
        return

    user = User(username=message.from_user.username, chat_id=chat_id, name=name)
    session.add(user)
    session.commit()

    msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫:")
    bot.register_next_step_handler(msg, process_age_step, session)

def process_age_step(message, session):
    try:
        age = int(message.text)
        user = session.query(User).filter_by(username=message.from_user.username).first()
        user.age = age
        session.commit()

        msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:")
        bot.register_next_step_handler(msg, process_city_step, session)
    except ValueError:
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤—ñ–∫.")

def process_city_step(message, session):
    user = session.query(User).filter_by(username=message.from_user.username).first()
    user.city = message.text
    session.commit()

    msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏:")
    bot.register_next_step_handler(msg, process_interests_step, session)

def process_interests_step(message, session):
    user = session.query(User).filter_by(username=message.from_user.username).first()
    user.interests = message.text
    session.commit()

    msg = bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é:")
    bot.register_next_step_handler(msg, process_photo_step, session)

def process_photo_step(message, session):
    if message.photo:
        photo_file = message.photo[-1].file_id
        file_info = bot.get_file(photo_file)
        downloaded_file = bot.download_file(file_info.file_path)

        photo_path = os.path.join(PHOTO_DIR, f"{message.from_user.username}_photo.jpg")
        with open(photo_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        user = session.query(User).filter_by(username=message.from_user.username).first()
        user.photo_path = photo_path
        session.commit()

        bot.reply_to(message, "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∏ –º–æ–∂–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /bio.", reply_markup=registered_menu())
    else:
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.")

@bot.message_handler(commands=['bio'])
def update_bio(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ:")
    bot.register_next_step_handler(msg, process_bio_step)

def process_bio_step(message):
    session = Session()
    user = session.query(User).filter_by(username=message.from_user.username).first()
    if user:
        user.bio = message.text
        session.commit()
        bot.reply_to(message, "–í–∞—à–∞ –±—ñ–æ–≥—Ä–∞—Ñ—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=registered_menu())
    else:
        bot.reply_to(message, "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /register.")
    session.close()

@bot.message_handler(commands=['view_profiles'])
def view_next_profile(message):
    user_states[message.chat.id] = 0
    send_profile(message)

def send_profile(message):
    session = Session()
    current_index = user_states[message.chat.id]
    users = session.query(User).all()

    if current_index >= len(users):
        bot.reply_to(message, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–Ω–∫–µ—Ç.", reply_markup=registered_menu())
        session.close()
        return

    user = users[current_index]

    if user.photo_path and os.path.exists(user.photo_path):
        bot.send_photo(message.chat.id, photo=open(user.photo_path, 'rb'),
                       caption=f"–Ü–º'—è: {user.name}\n–í—ñ–∫: {user.age}\n–ú—ñ—Å—Ç–æ: {user.city}\n–Ü–Ω—Ç–µ—Ä–µ—Å–∏: {user.interests}\n–ü—Ä–æ —Å–µ–±–µ: {user.bio}")
    else:
        bot.send_message(message.chat.id, 
                         f"–Ü–º'—è: {user.name}\n–í—ñ–∫: {user.age}\n–ú—ñ—Å—Ç–æ: {user.city}\n–Ü–Ω—Ç–µ—Ä–µ—Å–∏: {user.interests}\n–ü—Ä–æ —Å–µ–±–µ: {user.bio}\n\n–§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    like_button = types.KeyboardButton(f"üëç –õ–∞–π–∫ ({user.likes})")
    dislike_button = types.KeyboardButton(f"üëé –î–∏–∑–ª–∞–π–∫ ({user.dislikes})")
    main_menu_button = types.KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    markup.add(like_button, dislike_button, main_menu_button)

    bot.send_message(message.chat.id, "–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=markup)
    session.close()

def handle_vote(message):
    session = Session()
    if message.chat.id not in user_states:
        user_states[message.chat.id] = 0

    current_index = user_states[message.chat.id]
    users = session.query(User).all()

    if current_index >= len(users):
        bot.reply_to(message, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–Ω–∫–µ—Ç.", reply_markup=registered_menu())
        session.close()
        return

    user = users[current_index]

    if "–õ–∞–π–∫" in message.text:
        user.likes += 1
        session.commit()

        # –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –ª–∞–π–∫–Ω—É–≤—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        liker = session.query(User).filter_by(username=message.from_user.username).first()
        if liker:
            if liker.username not in user.likes_from_users.split(","):
                user.likes_from_users += f"{liker.username},"
                session.commit()

        bot.send_message(user.chat_id, f"–í–∞—Å –ª–∞–π–∫–Ω—É–ª–∏! –£ –≤–∞—Å —î –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫, —è–∫—â–æ –≤–∏ —Ç–∞–∫–æ–∂ –ø–æ—Å—Ç–∞–≤–∏—Ç–µ –ª–∞–π–∫ —Ü—å–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
        
        bot.reply_to(message, "–í–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")
    elif "–î–∏–∑–ª–∞–π–∫" in message.text:
        user.dislikes += 1
        session.commit()
        bot.reply_to(message, "–í–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫!")

    user_states[message.chat.id] += 1
    send_profile(message)
    session.close()

bot.polling(none_stop=True)
